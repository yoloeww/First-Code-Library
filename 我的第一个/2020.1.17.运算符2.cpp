//乘号，除号，取余运算符的优先级等级为3;加号，减号的优先等级为4;赋值运算符的优先等级为14。
#include <stdio.h>
int main(void)
{
	//算术运算符
	printf("%d, %lf\n", 5/2, 5.0/2);		//输出2， 2.5000000 除号运算符的操作数如果都为整型，那么其结果也为整型，会省略掉商后面的小数部分。如果操作数中有一个小数，那么其结果也为小数即double型

	int a;
	printf("%d\n", a = 3.98);				//输出a的值为3，因为把一个浮点型数据赋给整型变量，会丢失掉小数部分。

	printf("%d, %d\n", 5%2, 4%2);			//输出1, 0
//	printf("%d\n", 3.0%2);					//error	取余运算符两边的操作数必须为整型 否则编译会报错
	printf("%d, %d, %d\n", -13%3, 13%-3, -13%23);		//输出：-1, 1, -13	需要自己能计算符带负数的取余表达式的值

	//赋值运算符
	int b = 1, c = 7;
	printf("%d\n", b += 2);	//输出b的值为3，因为b += 2和b = b+2等价 
	printf("%d\n", c /= 2);	//输出c的值为3，因为c /= 2和c = c/2等价，此外还有-=，*=，%=等赋值运算符与之类似

//	b+c = 100;				//error,因为赋值运算符的左操作数必须是一个左值（你可以理解成一个变量），b+c只是一个常数（即不可以被修改的值），而非变量。

	/*下面代码不报错，说明在vc++6.0中，赋值表达式是个左值，即变量。
	然而vc++6.0写的其实是c++程序，而在c语言中赋值表达式的结果不是个左值*/
	a = 1, b = 2, c = 3;
	printf("%d\n", (a = b) = c);			//vc++6.0中会输出a的值为3，而在真正的c编译器上运行该程序是报错的。
	return 0;
}